/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
/** @type {?} */
const youtubeRegExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=|\?v=)([^#\&\?]*).*/;
/** @type {?} */
const validFileExtensions = ['jpeg', 'jpg', 'gif', 'png'];
/** @type {?} */
const validVideoExtensions = ['mp4'];
export class SliderLightboxComponent {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.YOUTUBE = 'youtube';
        this.IMAGE = 'image';
        this.VIDEO = 'video';
        this.fileUrl = '';
        this.fileExtension = '';
        this.type = this.IMAGE;
        // @Output
        this.close = new EventEmitter();
        this.prevImage = new EventEmitter();
        this.nextImage = new EventEmitter();
    }
    /**
     * @param {?} url
     * @return {?}
     */
    set currentImageSrc(url) {
        if (url && typeof (url) === 'string') {
            this.fileExtension = url.replace(/^.*\./, '');
            /** @type {?} */
            const match = url.match(youtubeRegExp);
            if (match && match[2].length === 11) {
                this.type = '';
                setTimeout(() => {
                    this.type = this.YOUTUBE;
                    url = `${'//www.youtube.com/embed/'}${match[2]}`;
                    this.fileUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);
                }, 50);
            }
            else if (this.fileExtension && validFileExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {
                this.type = this.IMAGE;
                this.fileUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);
            }
            else if (this.fileExtension && validVideoExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {
                this.type = '';
                setTimeout(() => {
                    this.type = this.VIDEO;
                    this.fileUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);
                }, 50);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.resetState();
    }
    /**
     * @return {?}
     */
    closeLightbox() {
        this.close.emit();
    }
    /**
     * @return {?}
     */
    prevImageLightbox() {
        this.prevImage.emit();
    }
    /**
     * @return {?}
     */
    nextImageLightbox() {
        this.nextImage.emit();
    }
    /**
     * @return {?}
     */
    resetState() {
        this.fileUrl = '';
        this.fileExtension = '';
        this.type = this.IMAGE;
    }
}
SliderLightboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'slider-lightbox',
                template: "<div class=\"ng-image-slider-lightbox\">\n    <div class=\"lightbox-wrapper\">\n        <a class=\"close\" (click)=\"closeLightbox()\">&times;</a>\n        <div class=\"lightbox-div\" #lightboxDiv>\n            <div class=\"pre-loader\">\n                <div class=\"mnml-spinner\"></div>\n            </div>\n            <!-- Image type -->\n            <img *ngIf=\"type === IMAGE && fileUrl\" [ngClass]=\"{'show': showImage, 'hide': !showImage}\" [src]=\"fileUrl\">\n            <!-- Youtube type -->\n            <iframe *ngIf=\"type === YOUTUBE && fileUrl\"\n                [ngClass]=\"{'show': showImage, 'hide': !showImage}\"\n                [src]=\"fileUrl\"\n                frameborder=\"0\" allowfullscreen></iframe>\n            <!-- Video type -->\n            <video [ngClass]=\"{'show': showImage, 'hide': !showImage}\" *ngIf=\"type === VIDEO && fileUrl\" controls  controlsList=\"nodownload\">\n                <source [src]=\"fileUrl\" type=\"video/mp4\"> Your browser does not support the video tag.\n            </video>\n            <div *ngIf=\"!fileUrl\">Invalid file format</div>\n            <div *ngIf=\"currentImageTitle\" [ngClass]=\"{'show': showImage, 'hide': !showImage}\" class=\"caption\">{{ currentImageTitle }}</div>\n            <a [ngClass]=\"{'disable': lightboxPrevDisable}\" class=\"prev icons prev-icon\" (click)=\"prevImageLightbox()\">&lsaquo;</a>\n            <a [ngClass]=\"{'disable': lightboxNextDisable}\" class=\"next icons next-icon\" (click)=\"nextImageLightbox()\">&rsaquo;</a>\n        </div>\n    </div>\n</div>"
            }] }
];
/** @nocollapse */
SliderLightboxComponent.ctorParameters = () => [
    { type: DomSanitizer }
];
SliderLightboxComponent.propDecorators = {
    currentImageSrc: [{ type: Input }],
    currentImageTitle: [{ type: Input }],
    showImage: [{ type: Input }],
    lightboxPrevDisable: [{ type: Input }],
    lightboxNextDisable: [{ type: Input }],
    close: [{ type: Output }],
    prevImage: [{ type: Output }],
    nextImage: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SliderLightboxComponent.prototype.YOUTUBE;
    /** @type {?} */
    SliderLightboxComponent.prototype.IMAGE;
    /** @type {?} */
    SliderLightboxComponent.prototype.VIDEO;
    /** @type {?} */
    SliderLightboxComponent.prototype.fileUrl;
    /** @type {?} */
    SliderLightboxComponent.prototype.fileExtension;
    /** @type {?} */
    SliderLightboxComponent.prototype.type;
    /** @type {?} */
    SliderLightboxComponent.prototype.currentImageTitle;
    /** @type {?} */
    SliderLightboxComponent.prototype.showImage;
    /** @type {?} */
    SliderLightboxComponent.prototype.lightboxPrevDisable;
    /** @type {?} */
    SliderLightboxComponent.prototype.lightboxNextDisable;
    /** @type {?} */
    SliderLightboxComponent.prototype.close;
    /** @type {?} */
    SliderLightboxComponent.prototype.prevImage;
    /** @type {?} */
    SliderLightboxComponent.prototype.nextImage;
    /** @type {?} */
    SliderLightboxComponent.prototype.sanitizer;
}

//# sourceMappingURL=data:application/json;base64,