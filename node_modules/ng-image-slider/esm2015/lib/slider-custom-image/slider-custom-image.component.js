/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
/** @type {?} */
const youtubeRegExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=|\?v=)([^#\&\?]*).*/;
/** @type {?} */
const validFileExtensions = ['jpeg', 'jpg', 'gif', 'png'];
/** @type {?} */
const validVideoExtensions = ['mp4'];
export class SliderCustomImageComponent {
    constructor() {
        this.YOUTUBE = 'youtube';
        this.IMAGE = 'image';
        this.VIDEO = 'video';
        this.fileUrl = '';
        this.fileExtension = '';
        this.type = this.IMAGE;
        this.isVideo = false;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    set imageUrl(url) {
        if (url && typeof (url) === 'string') {
            this.fileUrl = url;
            this.fileExtension = url.replace(/^.*\./, '');
            /** @type {?} */
            const match = url.match(youtubeRegExp);
            if (match && match[2].length === 11) {
                this.type = this.YOUTUBE;
                this.fileUrl = `https://img.youtube.com/vi/${match[2]}/0.jpg`;
            }
            else if (this.fileExtension && validFileExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {
                this.type = this.IMAGE;
            }
            else if (this.fileExtension && validVideoExtensions.indexOf(this.fileExtension.toLowerCase()) > -1) {
                this.type = this.VIDEO;
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
SliderCustomImageComponent.decorators = [
    { type: Component, args: [{
                selector: 'custom-img',
                template: "<div *ngIf=\"fileUrl\">\n    <img [ngClass]=\"{'image': type === IMAGE, 'youtube': type === YOUTUBE}\" *ngIf=\"type === IMAGE || type === YOUTUBE\" [src]=\"fileUrl\">\n    <video [class]=\"VIDEO\" *ngIf=\"type === VIDEO\">\n        <source [src]=\"fileUrl\" type=\"video/mp4\"> Your browser does not support the video tag.\n    </video>\n    <span *ngIf=\"type === YOUTUBE || type === VIDEO || isVideo\" class=\"youtube-icon\"></span>\n</div>"
            }] }
];
/** @nocollapse */
SliderCustomImageComponent.ctorParameters = () => [];
SliderCustomImageComponent.propDecorators = {
    imageUrl: [{ type: Input }],
    isVideo: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SliderCustomImageComponent.prototype.YOUTUBE;
    /** @type {?} */
    SliderCustomImageComponent.prototype.IMAGE;
    /** @type {?} */
    SliderCustomImageComponent.prototype.VIDEO;
    /** @type {?} */
    SliderCustomImageComponent.prototype.fileUrl;
    /** @type {?} */
    SliderCustomImageComponent.prototype.fileExtension;
    /** @type {?} */
    SliderCustomImageComponent.prototype.type;
    /** @type {?} */
    SliderCustomImageComponent.prototype.isVideo;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWN1c3RvbS1pbWFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1pbWFnZS1zbGlkZXIvIiwic291cmNlcyI6WyJsaWIvc2xpZGVyLWN1c3RvbS1pbWFnZS9zbGlkZXItY3VzdG9tLWltYWdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFJVCxLQUFLLEVBQ1IsTUFBTSxlQUFlLENBQUM7O0FBRXZCLE1BQU0sYUFBYSxHQUFHLHNFQUFzRSxDQUV6RDs7QUFGbkMsTUFDSSxtQkFBbUIsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUNwQjs7QUFGbkMsTUFFSSxvQkFBb0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBTW5DLE1BQU07SUE0QkY7dUJBM0JVLFNBQVM7cUJBQ1gsT0FBTztxQkFDUCxPQUFPO3VCQUNMLEVBQUU7NkJBQ0ksRUFBRTtvQkFDWCxJQUFJLENBQUMsS0FBSzt1QkFvQkUsS0FBSztLQUd2Qjs7Ozs7SUFwQkQsSUFDSSxRQUFRLENBQUMsR0FBRztRQUNaLElBQUksR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDbEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7WUFDbkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQzs7WUFFOUMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN2QyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLEVBQUUsRUFBRTtnQkFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLDhCQUE4QixLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQzthQUNqRTtpQkFBTSxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksbUJBQW1CLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDakcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQzFCO2lCQUFNLElBQUksSUFBSSxDQUFDLGFBQWEsSUFBSSxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUNsRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDMUI7U0FDSjtLQUNKOzs7O0lBTUQsUUFBUTtLQUNQOzs7O0lBRUQsZUFBZTtLQUNkOzs7O0lBRUQsV0FBVztLQUNWOzs7WUExQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxZQUFZO2dCQUN0QixzY0FBbUQ7YUFDdEQ7Ozs7O3VCQVVJLEtBQUs7c0JBaUJMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBPbkluaXQsXG4gICAgQWZ0ZXJWaWV3SW5pdCxcbiAgICBPbkRlc3Ryb3ksXG4gICAgSW5wdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmNvbnN0IHlvdXR1YmVSZWdFeHAgPSAvXi4qKHlvdXR1LmJlXFwvfHZcXC98dVxcL1xcd1xcL3xlbWJlZFxcL3x3YXRjaFxcP3Y9fFxcJnY9fFxcP3Y9KShbXiNcXCZcXD9dKikuKi8sXG4gICAgdmFsaWRGaWxlRXh0ZW5zaW9ucyA9IFsnanBlZycsICdqcGcnLCAnZ2lmJywgJ3BuZyddLFxuICAgIHZhbGlkVmlkZW9FeHRlbnNpb25zID0gWydtcDQnXTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdjdXN0b20taW1nJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2xpZGVyLWN1c3RvbS1pbWFnZS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU2xpZGVyQ3VzdG9tSW1hZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgWU9VVFVCRSA9ICd5b3V0dWJlJztcbiAgICBJTUFHRSA9ICdpbWFnZSc7XG4gICAgVklERU8gPSAndmlkZW8nO1xuICAgIGZpbGVVcmwgPSAnJztcbiAgICBmaWxlRXh0ZW5zaW9uID0gJyc7XG4gICAgdHlwZSA9IHRoaXMuSU1BR0U7XG5cbiAgICAvLyBAaW5wdXRzXG4gICAgQElucHV0KClcbiAgICBzZXQgaW1hZ2VVcmwodXJsKSB7XG4gICAgICAgIGlmICh1cmwgJiYgdHlwZW9mICh1cmwpID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhpcy5maWxlVXJsID0gdXJsO1xuICAgICAgICAgICAgdGhpcy5maWxlRXh0ZW5zaW9uID0gdXJsLnJlcGxhY2UoL14uKlxcLi8sICcnKTtcbiAgICAgICAgICAgIC8vIHZlcmlmeSBmb3IgeW91dHViZSB1cmxcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKHlvdXR1YmVSZWdFeHApO1xuICAgICAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWzJdLmxlbmd0aCA9PT0gMTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLllPVVRVQkU7XG4gICAgICAgICAgICAgICAgdGhpcy5maWxlVXJsID0gYGh0dHBzOi8vaW1nLnlvdXR1YmUuY29tL3ZpLyR7bWF0Y2hbMl19LzAuanBnYDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWxlRXh0ZW5zaW9uICYmIHZhbGlkRmlsZUV4dGVuc2lvbnMuaW5kZXhPZih0aGlzLmZpbGVFeHRlbnNpb24udG9Mb3dlckNhc2UoKSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHlwZSA9IHRoaXMuSU1BR0U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmlsZUV4dGVuc2lvbiAmJiB2YWxpZFZpZGVvRXh0ZW5zaW9ucy5pbmRleE9mKHRoaXMuZmlsZUV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gdGhpcy5WSURFTztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBASW5wdXQoKSBpc1ZpZGVvID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgfVxufVxuIl19