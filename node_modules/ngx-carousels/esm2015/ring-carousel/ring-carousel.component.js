/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Output, ContentChildren, QueryList, EventEmitter, ElementRef, ViewChildren, ViewChild, Input } from '@angular/core';
import { interval } from 'rxjs';
import { take, last, first } from 'rxjs/operators';
import { RingCarouselItemDirective } from './ring-carousel-item.directive';
export class RingCarouselComponent {
    constructor() {
        /**
         * Emit event of transition start
         */
        this.transitionStart = new EventEmitter();
        /**
         * Emit event of transition end
         */
        this.transitionEnd = new EventEmitter();
        /**
         * Color of transition rings
         */
        this.ringColor = 'white';
        /**
         * Count of transition rings
         */
        this.ringsCount = 12;
        /**
         * Rings delay in ms
         */
        this.ringsDelay = 130;
        /**
         * Ring expand/collapse duration in ms
         */
        this.ringsDuration = 800;
        /**
         * Expand carousel inner in transition
         */
        this.expandOnTransition = true;
        /**
         * Enable control on left and right part click
         */
        this.enableControl = true;
        /**
         * Stroke-width of each transition circle
         */
        this._strokeWidthStep = 0;
        this._isExpanding = false;
        this._isCollapsing = false;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._activeItem = this.carouselItems.first;
        this._activeIndex = 0;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (typeof this.ringsCount == 'string')
            this.ringsCount = parseInt((/** @type {?} */ (this.ringsCount)));
    }
    //***************************************************************************************************************
    //-Api-----------------------------------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * Turns the carousel to the item with the index path
     * @param {?} index
     * @param {?=} $event
     * @return {?}
     */
    selectAt(index, $event = null) {
        this._activeIndex = index;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        if ($event) {
            x = $event.layerX;
            y = $event.layerY;
        }
        else {
            y = this.carouselRef.nativeElement.clientHeight / 2;
            x = this.carouselRef.nativeElement.clientWidth / 2;
        }
        this.showRings(x, y, index);
    }
    /**
     * Select next carousel item
     * @param {?=} $event
     * @return {?}
     */
    next($event = null) {
        this._activeIndex = this._activeIndex + 1 < this.carouselItems.length ? this._activeIndex + 1 : 0;
        this.selectAt(this._activeIndex, $event);
    }
    /**
     * Select previous carousel item
     * @param {?=} $event
     * @return {?}
     */
    prev($event = null) {
        this._activeIndex = this._activeIndex - 1 >= 0 ? this._activeIndex - 1 : this.carouselItems.length - 1;
        this.selectAt(this._activeIndex, $event);
    }
    //***************************************************************************************************************
    //-Style-Visibility-Availability---------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} index
     * @return {?}
     */
    showRings(x, y, index) {
        this.calcRingsWidth(x, y);
        this._cx = x;
        this._cy = y;
        this._isExpanding = true;
        /** @type {?} */
        const timer = interval(this.ringsDelay).pipe(take(this.ringsCount));
        timer.subscribe(timValue => {
            this.transitionStart.emit(index);
            /** @type {?} */
            const animation = this.expandAnimations.find((_, i) => timValue == i);
            animation.nativeElement.beginElement();
        });
        timer.pipe(last()).subscribe(_ => {
            interval(this.ringsDuration).pipe(first())
                .subscribe(_ => {
                this._activeItem = this.carouselItems.find((_, i) => i == index);
                this._isExpanding = false;
                this.hideRings();
            });
        });
    }
    /**
     * @return {?}
     */
    hideRings() {
        this._isCollapsing = true;
        /** @type {?} */
        const timer = interval(this.ringsDelay).pipe(take(this.ringsCount));
        timer.subscribe(i => {
            /** @type {?} */
            const animation = this.collapseAnimations.find((_, index) => i == index);
            animation.nativeElement.beginElement();
        });
        timer.pipe(last()).subscribe(_ => {
            interval(this.ringsDuration).pipe(first())
                .subscribe(_ => {
                this._isCollapsing = false;
                this.transitionEnd.emit(this._activeIndex);
            });
        });
    }
    //***************************************************************************************************************
    //-Help----------------------------------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    calcRingsWidth(x, y) {
        /** @type {?} */
        const x1 = this.carouselRef.nativeElement.clientWidth;
        /** @type {?} */
        const y1 = this.carouselRef.nativeElement.clientHeight;
        /** @type {?} */
        const isTop = y1 / 2 - y > 0;
        /** @type {?} */
        const isLeft = x1 / 2 - x > 0;
        /** @type {?} */
        let d;
        if (isTop && isLeft)
            d = Math.sqrt(Math.pow(y1 - y, 2) + Math.pow(x1 - x, 2));
        else if (isTop && !isLeft)
            d = Math.sqrt(Math.pow(y1 - y, 2) + Math.pow(x, 2));
        else if (!isTop && isLeft)
            d = Math.sqrt((Math.pow(y, 2) + Math.pow(x1 - x, 2)));
        else
            d = Math.sqrt((Math.pow(y, 2) + Math.pow(x, 2)));
        this._strokeWidthStep = d / (this.ringsCount - 1);
    }
}
RingCarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'ring-carousel',
                template: "<div #carousel class=\"carousel\">\r\n    <div class=\"carousel__inner\" [style.transform]=\"expandOnTransition && (_isExpanding || _isCollapsing) ? 'scale(1.2)' : 'none'\">\r\n        <ng-template [ngTemplateOutlet]=\"_activeItem.templateRef\"></ng-template>\r\n    </div>\r\n    <div *ngIf=\"enableControl\" class=\"control\">\r\n        <div class=\"left\" (click)=\"prev($event)\"></div>\r\n        <div class=\"right\" (click)=\"next($event)\"></div>\r\n    </div>\r\n    <div class=\"circles\" *ngIf=\"_isExpanding || _isCollapsing\">\r\n        <svg>\r\n            <ng-template ngFor [ngForOf]=\"' '.repeat(ringsCount).split('')\" let-i=\"index\">\r\n                <svg:circle [attr.cx]=\"_cx\" [attr.cy]=\"_cy\" [attr.r]=\"_strokeWidthStep * i + 1\" fill=\"none\" [attr.stroke]=\"ringColor\" stroke-width=\"0\">\r\n                    <animate #expandSvgAnimations attributeName=\"stroke-width\" begin=\"click\" [attr.dur]=\"ringsDuration + 'ms'\" from=\"0\" [attr.to]=\"_strokeWidthStep + 1\" fill=\"freeze\" />\r\n                    <animate #collapseSvgAnimations attributeName=\"stroke-width\" begin=\"click\" [attr.dur]=\"ringsDuration + 'ms'\" [attr.from]=\"_strokeWidthStep + 1\" to=\"0\" fill=\"freeze\" />\r\n                </svg:circle>\r\n            </ng-template>\r\n        </svg>\r\n    </div>\r\n</div>\r\n\r\n",
                styles: [":host{width:100%}.carousel{position:relative;overflow:hidden}.carousel__inner{transition:transform .8s;transition:transform .8s,-webkit-transform .8s;z-index:1}.control{display:flex;position:absolute;top:0;right:0;bottom:0;left:0;z-index:2}.control .left,.control .right{height:100%;flex:1;cursor:pointer}.circles{position:absolute;top:0;right:0;bottom:0;left:0;z-index:3}.circles svg{height:100%;width:100%}"]
            }] }
];
RingCarouselComponent.propDecorators = {
    carouselItems: [{ type: ContentChildren, args: [RingCarouselItemDirective,] }],
    carouselRef: [{ type: ViewChild, args: ['carousel',] }],
    expandAnimations: [{ type: ViewChildren, args: ['expandSvgAnimations',] }],
    collapseAnimations: [{ type: ViewChildren, args: ['collapseSvgAnimations',] }],
    transitionStart: [{ type: Output }],
    transitionEnd: [{ type: Output }],
    ringColor: [{ type: Input }],
    ringsCount: [{ type: Input }],
    ringsDelay: [{ type: Input }],
    ringsDuration: [{ type: Input }],
    expandOnTransition: [{ type: Input }],
    enableControl: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RingCarouselComponent.prototype.carouselItems;
    /** @type {?} */
    RingCarouselComponent.prototype.carouselRef;
    /** @type {?} */
    RingCarouselComponent.prototype.expandAnimations;
    /** @type {?} */
    RingCarouselComponent.prototype.collapseAnimations;
    /**
     * Emit event of transition start
     * @type {?}
     */
    RingCarouselComponent.prototype.transitionStart;
    /**
     * Emit event of transition end
     * @type {?}
     */
    RingCarouselComponent.prototype.transitionEnd;
    /**
     * Color of transition rings
     * @type {?}
     */
    RingCarouselComponent.prototype.ringColor;
    /**
     * Count of transition rings
     * @type {?}
     */
    RingCarouselComponent.prototype.ringsCount;
    /**
     * Rings delay in ms
     * @type {?}
     */
    RingCarouselComponent.prototype.ringsDelay;
    /**
     * Ring expand/collapse duration in ms
     * @type {?}
     */
    RingCarouselComponent.prototype.ringsDuration;
    /**
     * Expand carousel inner in transition
     * @type {?}
     */
    RingCarouselComponent.prototype.expandOnTransition;
    /**
     * Enable control on left and right part click
     * @type {?}
     */
    RingCarouselComponent.prototype.enableControl;
    /** @type {?} */
    RingCarouselComponent.prototype._activeIndex;
    /** @type {?} */
    RingCarouselComponent.prototype._activeItem;
    /**
     * Stroke-width of each transition circle
     * @type {?}
     */
    RingCarouselComponent.prototype._strokeWidthStep;
    /** @type {?} */
    RingCarouselComponent.prototype._isExpanding;
    /** @type {?} */
    RingCarouselComponent.prototype._isCollapsing;
    /** @type {?} */
    RingCarouselComponent.prototype._cx;
    /** @type {?} */
    RingCarouselComponent.prototype._cy;
}
//# sourceMappingURL=data:application/json;base64,