import { CommonModule } from '@angular/common';
import { interval, timer } from 'rxjs';
import { first, take, last } from 'rxjs/operators';
import { Directive, TemplateRef, Component, ContentChildren, Input, ViewChildren, Output, EventEmitter, ViewChild, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class CarouselItemDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CarouselItemDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ng-template[carouselItem]',
            },] }
];
/** @nocollapse */
CarouselItemDirective.ctorParameters = () => [
    { type: TemplateRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class CarouselComponent {
    constructor() {
        /**
         * Enable autoChange of carousel items
         */
        this.autochange = false;
        /**
         * Enable transit animation
         */
        this.animationType = 'none';
        /**
         * Period for autoChange
         */
        this.period = 5000;
        this._activeIndex = 0;
        this._isAnimation = false;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setupCarousel();
    }
    //***************************************************************************************************************
    //-Setup---------------------------------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * @return {?}
     */
    setupCarousel() {
        if (this._subscriber)
            this._subscriber.unsubscribe();
        this.setItemActive(this._activeIndex);
        if (this.autochange)
            this._subscriber = interval(this.period)
                .subscribe(() => {
                this.setItemInactive(this._activeIndex);
                this._activeIndex = this._activeIndex + 1 >= this.carouselItems.length ? 0 : this._activeIndex + 1;
                this.setItemActive(this._activeIndex);
            });
    }
    //***************************************************************************************************************
    //-API-----------------------------------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * @param {?} indexPath
     * @return {?}
     */
    selectAt(indexPath) {
        if (!this._isAnimation) {
            this.setItemInactive(this._activeIndex);
            this._activeIndex = indexPath >= this.carouselItems.length ? this.carouselItems.length - 1 : indexPath;
            this._activeIndex = indexPath < 0 ? 0 : indexPath;
            this.setItemActive(this._activeIndex);
            this.setupCarousel();
        }
    }
    /**
     * @return {?}
     */
    next() {
        if (!this._isAnimation) {
            this.setItemInactive(this._activeIndex);
            this._activeIndex = this._activeIndex + 1 >= this.carouselItems.length ? 0 : this._activeIndex + 1;
            this.setItemActive(this._activeIndex);
            this.setupCarousel();
        }
    }
    /**
     * @return {?}
     */
    prev() {
        if (!this._isAnimation) {
            this.setItemInactive(this._activeIndex);
            this._activeIndex = this._activeIndex - 1 < 0 ? this.carouselItems.length - 1 : this._activeIndex - 1;
            this.setItemActive(this._activeIndex);
            this.setupCarousel();
        }
    }
    //***************************************************************************************************************
    //-Help----------------------------------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * @param {?} index
     * @return {?}
     */
    setItemActive(index) {
        /** @type {?} */
        const item = this.carouselItems.find((_, i) => i == index);
        switch (this.animationType) {
            case 'fade':
                if (item) {
                    this._isAnimation = true;
                    item.nativeElement.classList.add('active', 'fade-in');
                    interval(1005).pipe(first())
                        .subscribe(() => {
                        item.nativeElement.classList.remove('fade-in');
                        this._isAnimation = false;
                    });
                }
                break;
            default:
                if (item)
                    item.nativeElement.classList.add('active');
                break;
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setItemInactive(index) {
        /** @type {?} */
        const item = this.carouselItems.find((_, i) => i == index);
        switch (this.animationType) {
            case 'fade':
                if (item) {
                    item.nativeElement.classList.add('fade-out');
                    interval(1005).pipe(first())
                        .subscribe(() => {
                        item.nativeElement.classList.remove('active', 'fade-out');
                    });
                }
                break;
            default:
                if (item)
                    item.nativeElement.classList.remove('active');
                break;
        }
    }
}
CarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'carousel',
                template: "<div class=\"carousel\" [style.position]=\"animationType == 'none' ? 'static' : 'relative'\">\r\n    <ng-template ngFor let-item [ngForOf]=\"carouselInners\">\r\n        <div #carouselItems class=\"carousel__item\">\r\n            <ng-template [ngTemplateOutlet]=\"item.templateRef\"></ng-template>\r\n        </div>\r\n    </ng-template>\r\n</div>",
                styles: [".carousel__item{display:none;transition:transform 1s ease-in-out,opacity 1s ease-in-out,-webkit-transform 1s ease-in-out}.carousel__item.active{display:block}.carousel__item.fade-out{position:absolute;top:0;right:0;bottom:0;left:0;-webkit-animation:1s linear fadeOut;animation:1s linear fadeOut}.carousel__item.fade-in{-webkit-animation:1s linear fadeIn;animation:1s linear fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}"]
            }] }
];
CarouselComponent.propDecorators = {
    carouselInners: [{ type: ContentChildren, args: [CarouselItemDirective,] }],
    carouselItems: [{ type: ViewChildren, args: ['carouselItems',] }],
    autochange: [{ type: Input }],
    animationType: [{ type: Input }],
    period: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class RotateCarouselItemDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
RotateCarouselItemDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ng-template[rotateCarouselItem]',
            },] }
];
/** @nocollapse */
RotateCarouselItemDirective.ctorParameters = () => [
    { type: TemplateRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_WIDTH = '300px';
/** @type {?} */
const DEFAULT_HEIGHT = '200px';
/** @type {?} */
const DEFAULT_DEPTH = '510px';
/** @type {?} */
const DEFAULT_PERIOD = 3500;
/** @type {?} */
const FULL_ANGLE = 360;
class RotateCarouselComponent {
    constructor() {
        /**
         * Emit event of rotation start
         */
        this.rotationStart = new EventEmitter();
        /**
         * Emit event of rotation end
         */
        this.rotationEnd = new EventEmitter();
        /**
         * Width of content in carousel item
         */
        this.width = DEFAULT_WIDTH;
        /**
         * Height of content in carousel item
         */
        this.height = DEFAULT_HEIGHT;
        /**
         * Depth of the center of carousel
         */
        this.depth = DEFAULT_DEPTH;
        /**
         * Period of carousel rotation
         */
        this.period = DEFAULT_PERIOD;
        /**
         * Direction of rotation
         */
        this.direction = 'forward';
        this._activeIndex = 0;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.calcItemsAngle();
        this.setupRotation();
        //this.calcHeight();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.setupRotation();
        //this.calcHeight();
    }
    //***************************************************************************************************************
    //-Setup---------------------------------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * @return {?}
     */
    calcItemsAngle() {
        this._angleStep = FULL_ANGLE / this.rotateItems.length;
        /** @type {?} */
        let angle = 0;
        this.rotateItems.forEach(x => {
            x.angle = angle;
            angle += this._angleStep;
        });
    }
    /**
     * @return {?}
     */
    setupRotation() {
        if (!Number.isNaN((/** @type {?} */ (this.period)) % 1))
            this._period = parseInt((/** @type {?} */ (this.period)));
        else {
            /** @type {?} */
            const periodStr = (/** @type {?} */ (this.period));
            // split string like '1003ms' to '1000' and 'ms'
            /** @type {?} */
            const values = periodStr.replace(/\'/g, '').split(/([0-9]*\.?[0-9])/);
            this._period = values[2] == 's' ? parseInt(values[1]) * 1000 : parseInt(values[1]);
        }
        if (this._rotationTimerSubscription)
            this._rotationTimerSubscription.unsubscribe();
        this._rotationTimerSubscription = this.setRotationTimer();
    }
    /**
     * @return {?}
     */
    calcHeight() {
        /** @type {?} */
        const maxH = Math.max(null, ...this.rotateItems.map(x => x.templateRef.elementRef.nativeElement.clientHeight));
        if (!this.height)
            this.height = maxH + 'px';
    }
    //***************************************************************************************************************
    //-Events--------------------------------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * @return {?}
     */
    onRotationStart() {
        this.rotationStart.emit(this._activeIndex);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onRotateEnd($event) {
        if (this._activeIndex == 0) {
            this.carouselInner.nativeElement.style.transition = 'none';
            this.carouselInner.nativeElement.style.transform = 'rotateY(0deg)';
        }
        this.rotationEnd.emit(this._activeIndex);
    }
    //***************************************************************************************************************
    //-Style-Visibility-Availability---------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * @return {?}
     */
    getCarouselStyle() {
        /** @type {?} */
        const width = this.width;
        /** @type {?} */
        const height = this.height;
        /** @type {?} */
        const depth = this.depth;
        return { width: width, height: height, transform: 'translateZ(-' + depth + ')' };
    }
    /**
     * @param {?} item
     * @return {?}
     */
    getItemStyle(item) {
        /** @type {?} */
        const depth = this.depth;
        /** @type {?} */
        const style = { transform: 'rotateY(' + item.angle + 'deg) translateZ(' + depth + ')' };
        return style;
    }
    //***************************************************************************************************************
    //-Methods-------------------------------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * @param {?} indexPath
     * @return {?}
     */
    selectAt(indexPath) {
        this._rotationTimerSubscription.unsubscribe();
        this.carouselInner.nativeElement.style.transform = `rotateY(${indexPath * this._angleStep}deg)`;
        this._rotationTimerSubscription = this.setRotationTimer();
    }
    //***************************************************************************************************************
    //-Help----------------------------------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * @return {?}
     */
    setRotationTimer() {
        return timer(0, this._period)
            .subscribe((i) => {
            this._activeIndex = i % this.rotateItems.length;
            /** @type {?} */
            let angle;
            if (this._activeIndex == 1)
                this.carouselInner.nativeElement.style.transition = `transform ${this._period / 2}ms ease-in-out`;
            if (i > 0 && this._activeIndex == 0)
                angle = this.rotateItems.length * this._angleStep * (this.direction == 'forward' ? -1 : 1);
            else
                angle = this._activeIndex * this._angleStep * (this.direction == 'forward' ? -1 : 1);
            this.carouselInner.nativeElement.style.transform = `rotateY(${angle}deg)`;
            this.onRotationStart();
        });
    }
}
RotateCarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'rotate-carousel',
                template: "<figure class=\"carousel\">\r\n    <div class=\"carousel__content\" [ngStyle]=\"getCarouselStyle()\">\r\n        <div #carouselInner class=\"carousel__inner\" (transitionend)=\"onRotateEnd($event)\">\r\n            <ng-template ngFor let-item [ngForOf]=\"rotateItems\">\r\n                <div class=\"carousel__item\" [ngStyle]=\"getItemStyle(item)\">\r\n                    <ng-template [ngTemplateOutlet]=\"item.templateRef\"></ng-template>\r\n                </div>\r\n            </ng-template>\r\n        </div>\r\n    </div>\r\n</figure>",
                styles: [":host{width:100%}.carousel{display:flex;justify-content:center;-webkit-perspective:1000px;perspective:1000px}.carousel__content{-webkit-transform:translateZ(-40vw);transform:translateZ(-40vw);-webkit-transform-style:preserve-3d;transform-style:preserve-3d}.carousel__inner{height:100%;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}.carousel__item{display:flex;align-items:center;position:absolute;height:100%;width:100%}.carousel__item img{height:100%;width:100%;-o-object-fit:cover;object-fit:cover;-o-object-position:center;object-position:center;border-radius:15px}"]
            }] }
];
RotateCarouselComponent.propDecorators = {
    rotateItems: [{ type: ContentChildren, args: [RotateCarouselItemDirective,] }],
    carouselInner: [{ type: ViewChild, args: ['carouselInner',] }],
    rotationStart: [{ type: Output }],
    rotationEnd: [{ type: Output }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    depth: [{ type: Input }],
    period: [{ type: Input }],
    direction: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class RingCarouselItemDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
RingCarouselItemDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ng-template[ringCarouselItem]',
            },] }
];
/** @nocollapse */
RingCarouselItemDirective.ctorParameters = () => [
    { type: TemplateRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class RingCarouselComponent {
    constructor() {
        /**
         * Emit event of transition start
         */
        this.transitionStart = new EventEmitter();
        /**
         * Emit event of transition end
         */
        this.transitionEnd = new EventEmitter();
        /**
         * Color of transition rings
         */
        this.ringColor = 'white';
        /**
         * Count of transition rings
         */
        this.ringsCount = 12;
        /**
         * Rings delay in ms
         */
        this.ringsDelay = 130;
        /**
         * Ring expand/collapse duration in ms
         */
        this.ringsDuration = 800;
        /**
         * Expand carousel inner in transition
         */
        this.expandOnTransition = true;
        /**
         * Enable control on left and right part click
         */
        this.enableControl = true;
        /**
         * Stroke-width of each transition circle
         */
        this._strokeWidthStep = 0;
        this._isExpanding = false;
        this._isCollapsing = false;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._activeItem = this.carouselItems.first;
        this._activeIndex = 0;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        if (typeof this.ringsCount == 'string')
            this.ringsCount = parseInt((/** @type {?} */ (this.ringsCount)));
    }
    //***************************************************************************************************************
    //-Api-----------------------------------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * Turns the carousel to the item with the index path
     * @param {?} index
     * @param {?=} $event
     * @return {?}
     */
    selectAt(index, $event = null) {
        this._activeIndex = index;
        /** @type {?} */
        let x;
        /** @type {?} */
        let y;
        if ($event) {
            x = $event.layerX;
            y = $event.layerY;
        }
        else {
            y = this.carouselRef.nativeElement.clientHeight / 2;
            x = this.carouselRef.nativeElement.clientWidth / 2;
        }
        this.showRings(x, y, index);
    }
    /**
     * Select next carousel item
     * @param {?=} $event
     * @return {?}
     */
    next($event = null) {
        this._activeIndex = this._activeIndex + 1 < this.carouselItems.length ? this._activeIndex + 1 : 0;
        this.selectAt(this._activeIndex, $event);
    }
    /**
     * Select previous carousel item
     * @param {?=} $event
     * @return {?}
     */
    prev($event = null) {
        this._activeIndex = this._activeIndex - 1 >= 0 ? this._activeIndex - 1 : this.carouselItems.length - 1;
        this.selectAt(this._activeIndex, $event);
    }
    //***************************************************************************************************************
    //-Style-Visibility-Availability---------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} index
     * @return {?}
     */
    showRings(x, y, index) {
        this.calcRingsWidth(x, y);
        this._cx = x;
        this._cy = y;
        this._isExpanding = true;
        /** @type {?} */
        const timer$$1 = interval(this.ringsDelay).pipe(take(this.ringsCount));
        timer$$1.subscribe(timValue => {
            this.transitionStart.emit(index);
            /** @type {?} */
            const animation = this.expandAnimations.find((_, i) => timValue == i);
            animation.nativeElement.beginElement();
        });
        timer$$1.pipe(last()).subscribe(_ => {
            interval(this.ringsDuration).pipe(first())
                .subscribe(_ => {
                this._activeItem = this.carouselItems.find((_, i) => i == index);
                this._isExpanding = false;
                this.hideRings();
            });
        });
    }
    /**
     * @return {?}
     */
    hideRings() {
        this._isCollapsing = true;
        /** @type {?} */
        const timer$$1 = interval(this.ringsDelay).pipe(take(this.ringsCount));
        timer$$1.subscribe(i => {
            /** @type {?} */
            const animation = this.collapseAnimations.find((_, index) => i == index);
            animation.nativeElement.beginElement();
        });
        timer$$1.pipe(last()).subscribe(_ => {
            interval(this.ringsDuration).pipe(first())
                .subscribe(_ => {
                this._isCollapsing = false;
                this.transitionEnd.emit(this._activeIndex);
            });
        });
    }
    //***************************************************************************************************************
    //-Help----------------------------------------------------------------------------------------------------------
    //***************************************************************************************************************
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    calcRingsWidth(x, y) {
        /** @type {?} */
        const x1 = this.carouselRef.nativeElement.clientWidth;
        /** @type {?} */
        const y1 = this.carouselRef.nativeElement.clientHeight;
        /** @type {?} */
        const isTop = y1 / 2 - y > 0;
        /** @type {?} */
        const isLeft = x1 / 2 - x > 0;
        /** @type {?} */
        let d;
        if (isTop && isLeft)
            d = Math.sqrt(Math.pow(y1 - y, 2) + Math.pow(x1 - x, 2));
        else if (isTop && !isLeft)
            d = Math.sqrt(Math.pow(y1 - y, 2) + Math.pow(x, 2));
        else if (!isTop && isLeft)
            d = Math.sqrt((Math.pow(y, 2) + Math.pow(x1 - x, 2)));
        else
            d = Math.sqrt((Math.pow(y, 2) + Math.pow(x, 2)));
        this._strokeWidthStep = d / (this.ringsCount - 1);
    }
}
RingCarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'ring-carousel',
                template: "<div #carousel class=\"carousel\">\r\n    <div class=\"carousel__inner\" [style.transform]=\"expandOnTransition && (_isExpanding || _isCollapsing) ? 'scale(1.2)' : 'none'\">\r\n        <ng-template [ngTemplateOutlet]=\"_activeItem.templateRef\"></ng-template>\r\n    </div>\r\n    <div *ngIf=\"enableControl\" class=\"control\">\r\n        <div class=\"left\" (click)=\"prev($event)\"></div>\r\n        <div class=\"right\" (click)=\"next($event)\"></div>\r\n    </div>\r\n    <div class=\"circles\" *ngIf=\"_isExpanding || _isCollapsing\">\r\n        <svg>\r\n            <ng-template ngFor [ngForOf]=\"' '.repeat(ringsCount).split('')\" let-i=\"index\">\r\n                <svg:circle [attr.cx]=\"_cx\" [attr.cy]=\"_cy\" [attr.r]=\"_strokeWidthStep * i + 1\" fill=\"none\" [attr.stroke]=\"ringColor\" stroke-width=\"0\">\r\n                    <animate #expandSvgAnimations attributeName=\"stroke-width\" begin=\"click\" [attr.dur]=\"ringsDuration + 'ms'\" from=\"0\" [attr.to]=\"_strokeWidthStep + 1\" fill=\"freeze\" />\r\n                    <animate #collapseSvgAnimations attributeName=\"stroke-width\" begin=\"click\" [attr.dur]=\"ringsDuration + 'ms'\" [attr.from]=\"_strokeWidthStep + 1\" to=\"0\" fill=\"freeze\" />\r\n                </svg:circle>\r\n            </ng-template>\r\n        </svg>\r\n    </div>\r\n</div>\r\n\r\n",
                styles: [":host{width:100%}.carousel{position:relative;overflow:hidden}.carousel__inner{transition:transform .8s;transition:transform .8s,-webkit-transform .8s;z-index:1}.control{display:flex;position:absolute;top:0;right:0;bottom:0;left:0;z-index:2}.control .left,.control .right{height:100%;flex:1;cursor:pointer}.circles{position:absolute;top:0;right:0;bottom:0;left:0;z-index:3}.circles svg{height:100%;width:100%}"]
            }] }
];
RingCarouselComponent.propDecorators = {
    carouselItems: [{ type: ContentChildren, args: [RingCarouselItemDirective,] }],
    carouselRef: [{ type: ViewChild, args: ['carousel',] }],
    expandAnimations: [{ type: ViewChildren, args: ['expandSvgAnimations',] }],
    collapseAnimations: [{ type: ViewChildren, args: ['collapseSvgAnimations',] }],
    transitionStart: [{ type: Output }],
    transitionEnd: [{ type: Output }],
    ringColor: [{ type: Input }],
    ringsCount: [{ type: Input }],
    ringsDelay: [{ type: Input }],
    ringsDuration: [{ type: Input }],
    expandOnTransition: [{ type: Input }],
    enableControl: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
class CarouselModule {
}
CarouselModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    CarouselComponent, CarouselItemDirective,
                    RotateCarouselComponent, RotateCarouselItemDirective,
                    RingCarouselComponent, RingCarouselItemDirective
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    CarouselComponent, CarouselItemDirective,
                    RotateCarouselComponent, RotateCarouselItemDirective,
                    RingCarouselComponent, RingCarouselItemDirective
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { CarouselModule, RingCarouselComponent, RotateCarouselComponent, RingCarouselItemDirective, RotateCarouselItemDirective, CarouselItemDirective as ɵb, CarouselComponent as ɵa };

//# sourceMappingURL=ngx-carousels.js.map